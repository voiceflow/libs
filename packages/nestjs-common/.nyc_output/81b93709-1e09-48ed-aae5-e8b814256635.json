{"/Users/z4o4z/projects/voiceflow/libs/packages/nestjs-common/src/health/health-check-error.dto.ts":{"path":"/Users/z4o4z/projects/voiceflow/libs/packages/nestjs-common/src/health/health-check-error.dto.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":37}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":37}},"3":{"start":{"line":13,"column":8},"end":{"line":26,"column":9}},"4":{"start":{"line":14,"column":12},"end":{"line":17,"column":14}},"5":{"start":{"line":18,"column":12},"end":{"line":20,"column":13}},"6":{"start":{"line":19,"column":16},"end":{"line":19,"column":47}},"7":{"start":{"line":21,"column":12},"end":{"line":21,"column":34}},"8":{"start":{"line":24,"column":12},"end":{"line":24,"column":30}},"9":{"start":{"line":25,"column":12},"end":{"line":25,"column":34}},"10":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":23},"end":{"line":27,"column":5}},"line":12}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":8},"end":{"line":26,"column":9}},"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":26,"column":9}},{"start":{"line":13,"column":8},"end":{"line":26,"column":9}}],"line":13},"1":{"loc":{"start":{"line":18,"column":12},"end":{"line":20,"column":13}},"type":"if","locations":[{"start":{"line":18,"column":12},"end":{"line":20,"column":13}},{"start":{"line":18,"column":12},"end":{"line":20,"column":13}}],"line":18}},"s":{"0":1,"1":1,"2":1,"3":2,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"f":{"0":2},"b":{"0":[1,1],"1":[1,0]},"inputSourceMap":{"version":3,"file":"/Users/z4o4z/projects/voiceflow/libs/packages/nestjs-common/src/health/health-check-error.dto.ts","sources":["/Users/z4o4z/projects/voiceflow/libs/packages/nestjs-common/src/health/health-check-error.dto.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAO3C;;GAEG;AACH,MAAa,mBAAmB;IAK9B;;OAEG;IACH,YAAY,KAAQ;QAClB,IAAI,IAAA,qBAAa,EAAC,KAAK,CAAC,EAAE;YACxB,IAAI,CAAC,KAAK,GAAG;gBACX,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,OAAO,EAAE,KAAK,CAAC,OAAO;aACvB,CAAC;YACF,IAAI,KAAK,CAAC,KAAK,EAAE;gBACf,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;aAChC;YAED,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;SACvB;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;SACvB;IACH,CAAC;CACF;AAxBD,kDAwBC","sourcesContent":["import { isNativeError } from 'util/types';\n\n/**\n * A plain object representation of an Error object.\n */\ntype PlainError = Pick<Error, keyof Error>;\n\n/**\n * A health-check compatible plain object to represent an error that occurred.\n */\nexport class HealthCheckErrorDto<T = unknown> {\n  readonly error: PlainError | null;\n\n  readonly rawError: T;\n\n  /**\n   * Converts any error (doesn't need to be an `Error` object) to a health-check compatible plain object.\n   */\n  constructor(error: T) {\n    if (isNativeError(error)) {\n      this.error = {\n        name: error.name,\n        message: error.message,\n      };\n      if (error.stack) {\n        this.error.stack = error.stack;\n      }\n\n      this.rawError = error;\n    } else {\n      this.error = null;\n      this.rawError = error;\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cc48108878abf32b10484490cf1466aae1659ef2"}}